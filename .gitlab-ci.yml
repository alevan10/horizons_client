# This file is a template, and might need editing before it works on your project.
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Python.gitlab-ci.yml

# Official language image. Look for the different tagged releases at:
# https://hub.docker.com/r/library/python/tags/
image: python:3.9

# Change pip's cache directory to be inside the project directory since we can
# only cache local items.
variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"

# Pip's cache doesn't store the python packages
# https://pip.pypa.io/en/stable/reference/pip_install/#caching
#
# If you want to also cache the installed packages, you have to install
# them in a virtualenv and cache it as well.
cache:
  paths:
    - .cache/pip
    - venv/

before_script:
  - python -V  # Print out python version for debugging
  - pip install virtualenv
  - virtualenv venv
  - source venv/bin/activate
  - pip install --upgrade pip
  - pip install poetry
  - poetry config http-basic.home $PYPI_USER $PYPI_PASSWORD
  - poetry install -v
  - export PYTHONPATH="$PYTHONPATH:$(pwd)/src"
  - git config --global user.email ruthie@andrewlevan.com
  - git config --global user.name robo_ruthie
  - git config --global credential.helper cache

stages:
#  - Static Analysis
#  - Tests
#  - Build and Publish
  - Downstream

#Pylint:
#  stage: Static Analysis
#  retry: 1
#  script:
#    - pylint -E -d C0301 src/horizons_client tests
#
#Black:
#  stage: Static Analysis
#  retry: 1
#  script:
#    - python -m black . --check --verbose
#
#Unit:
#  stage: Tests
#  retry: 1
#  script:
#    - pytest -v ./tests/unittests
#
#Functional:
#  stage: Tests
#  script:
#    - pytest -v ./tests/functional

#Build and Publish Package:
#  stage: Build and Publish
#  retry: 1
#  only:
#    - main
#  artifacts:
#    untracked: true
#    paths:
#      - dist/
#  script:
#    - poetry build --format wheel
#    - twine upload -u "$PYPI_USER" -p "$PYPI_PASSWORD" --verbose --repository-url http://pypi.home ./dist/*

Update Downstream Projects:
  stage: Downstream
  retry: 1
#  only:
#    - main
  script:
    - export VERSION="$(poetry version -s)"
    - export BRANCH_NAME="ruthie/update_horizons_client_$(poetry version -s)"
    - export HORIZONS_URL="dev.levan.home/alevan/horizons-api"
    - git clone http://robo_ruthie:${HORIZONS_API_TOKEN}@${HORIZONS_URL}
    - cd horizons-api
    - export BRANCH_NAME="ruthie/update_horizons_client_$VERSION"
    - git checkout -b $BRANCH_NAME && poetry update horizons_client && git add -A && git commit -m "Updating to horizons client version $VERSION" && git push http://robo_ruthie:${HORIZONS_API_TOKEN}@${HORIZONS_URL} $BRANCH_NAME -o merge_request.create -o merge_request.merge_when_pipeline_succeeds -o merge_request.remove_source_branch -o merge_request.title="Update Horizons Client Version to $VERSION"
